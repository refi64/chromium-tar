// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_gl_3_autogen.h:
//   Defines the Desktop GL 3.x entry points.

#ifndef LIBGL_ENTRY_POINTS_GL_3_AUTOGEN_H_
#define LIBGL_ENTRY_POINTS_GL_3_AUTOGEN_H_

#include <export.h>
#include "angle_gl.h"

namespace gl
{

// GL 3.0
ANGLE_EXPORT void GL_APIENTRY BeginConditionalRender(GLuint id, GLenum mode);
ANGLE_EXPORT void GL_APIENTRY BeginTransformFeedback(GLenum primitiveMode);
ANGLE_EXPORT void GL_APIENTRY BindBufferBase(GLenum target, GLuint index, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY
BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
ANGLE_EXPORT void GL_APIENTRY BindFragDataLocation(GLuint program,
                                                   GLuint color,
                                                   const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY BindFramebuffer(GLenum target, GLuint framebuffer);
ANGLE_EXPORT void GL_APIENTRY BindRenderbuffer(GLenum target, GLuint renderbuffer);
ANGLE_EXPORT void GL_APIENTRY BindVertexArray(GLuint array);
ANGLE_EXPORT void GL_APIENTRY BlitFramebuffer(GLint srcX0,
                                              GLint srcY0,
                                              GLint srcX1,
                                              GLint srcY1,
                                              GLint dstX0,
                                              GLint dstY0,
                                              GLint dstX1,
                                              GLint dstY1,
                                              GLbitfield mask,
                                              GLenum filter);
ANGLE_EXPORT GLenum GL_APIENTRY CheckFramebufferStatus(GLenum target);
ANGLE_EXPORT void GL_APIENTRY ClampColor(GLenum target, GLenum clamp);
ANGLE_EXPORT void GL_APIENTRY ClearBufferfi(GLenum buffer,
                                            GLint drawbuffer,
                                            GLfloat depth,
                                            GLint stencil);
ANGLE_EXPORT void GL_APIENTRY ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
ANGLE_EXPORT void GL_APIENTRY ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY
ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
ANGLE_EXPORT void GL_APIENTRY DeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
ANGLE_EXPORT void GL_APIENTRY DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
ANGLE_EXPORT void GL_APIENTRY DeleteVertexArrays(GLsizei n, const GLuint *arrays);
ANGLE_EXPORT void GL_APIENTRY Disablei(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY Enablei(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY EndConditionalRender();
ANGLE_EXPORT void GL_APIENTRY EndTransformFeedback();
ANGLE_EXPORT void GL_APIENTRY FlushMappedBufferRange(GLenum target,
                                                     GLintptr offset,
                                                     GLsizeiptr length);
ANGLE_EXPORT void GL_APIENTRY FramebufferRenderbuffer(GLenum target,
                                                      GLenum attachment,
                                                      GLenum renderbuffertarget,
                                                      GLuint renderbuffer);
ANGLE_EXPORT void GL_APIENTRY FramebufferTexture1D(GLenum target,
                                                   GLenum attachment,
                                                   GLenum textarget,
                                                   GLuint texture,
                                                   GLint level);
ANGLE_EXPORT void GL_APIENTRY FramebufferTexture2D(GLenum target,
                                                   GLenum attachment,
                                                   GLenum textarget,
                                                   GLuint texture,
                                                   GLint level);
ANGLE_EXPORT void GL_APIENTRY FramebufferTexture3D(GLenum target,
                                                   GLenum attachment,
                                                   GLenum textarget,
                                                   GLuint texture,
                                                   GLint level,
                                                   GLint zoffset);
ANGLE_EXPORT void GL_APIENTRY
FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
ANGLE_EXPORT void GL_APIENTRY GenFramebuffers(GLsizei n, GLuint *framebuffers);
ANGLE_EXPORT void GL_APIENTRY GenRenderbuffers(GLsizei n, GLuint *renderbuffers);
ANGLE_EXPORT void GL_APIENTRY GenVertexArrays(GLsizei n, GLuint *arrays);
ANGLE_EXPORT void GL_APIENTRY GenerateMipmap(GLenum target);
ANGLE_EXPORT void GL_APIENTRY GetBooleani_v(GLenum target, GLuint index, GLboolean *data);
ANGLE_EXPORT GLint GL_APIENTRY GetFragDataLocation(GLuint program, const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GetFramebufferAttachmentParameteriv(GLenum target,
                                                                  GLenum attachment,
                                                                  GLenum pname,
                                                                  GLint *params);
ANGLE_EXPORT void GL_APIENTRY GetIntegeri_v(GLenum target, GLuint index, GLint *data);
ANGLE_EXPORT void GL_APIENTRY GetRenderbufferParameteriv(GLenum target,
                                                         GLenum pname,
                                                         GLint *params);
ANGLE_EXPORT const GLubyte *GL_APIENTRY GetStringi(GLenum name, GLuint index);
ANGLE_EXPORT void GL_APIENTRY GetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GetTransformFeedbackVarying(GLuint program,
                                                          GLuint index,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLsizei *size,
                                                          GLenum *type,
                                                          GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GetUniformuiv(GLuint program, GLint location, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY IsEnabledi(GLenum target, GLuint index);
ANGLE_EXPORT GLboolean GL_APIENTRY IsFramebuffer(GLuint framebuffer);
ANGLE_EXPORT GLboolean GL_APIENTRY IsRenderbuffer(GLuint renderbuffer);
ANGLE_EXPORT GLboolean GL_APIENTRY IsVertexArray(GLuint array);
ANGLE_EXPORT void *GL_APIENTRY MapBufferRange(GLenum target,
                                              GLintptr offset,
                                              GLsizeiptr length,
                                              GLbitfield access);
ANGLE_EXPORT void GL_APIENTRY RenderbufferStorage(GLenum target,
                                                  GLenum internalformat,
                                                  GLsizei width,
                                                  GLsizei height);
ANGLE_EXPORT void GL_APIENTRY RenderbufferStorageMultisample(GLenum target,
                                                             GLsizei samples,
                                                             GLenum internalformat,
                                                             GLsizei width,
                                                             GLsizei height);
ANGLE_EXPORT void GL_APIENTRY TexParameterIiv(GLenum target, GLenum pname, const GLint *params);
ANGLE_EXPORT void GL_APIENTRY TexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
ANGLE_EXPORT void GL_APIENTRY TransformFeedbackVaryings(GLuint program,
                                                        GLsizei count,
                                                        const GLchar *const *varyings,
                                                        GLenum bufferMode);
ANGLE_EXPORT void GL_APIENTRY Uniform1ui(GLint location, GLuint v0);
ANGLE_EXPORT void GL_APIENTRY Uniform1uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY Uniform2ui(GLint location, GLuint v0, GLuint v1);
ANGLE_EXPORT void GL_APIENTRY Uniform2uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
ANGLE_EXPORT void GL_APIENTRY Uniform3uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY
Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
ANGLE_EXPORT void GL_APIENTRY Uniform4uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI1i(GLuint index, GLint x);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI1iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI1ui(GLuint index, GLuint x);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI1uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI2i(GLuint index, GLint x, GLint y);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI2iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI2ui(GLuint index, GLuint x, GLuint y);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI2uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI3iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI3uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI4bv(GLuint index, const GLbyte *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI4iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI4sv(GLuint index, const GLshort *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI4ubv(GLuint index, const GLubyte *v);
ANGLE_EXPORT void GL_APIENTRY
VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI4uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY VertexAttribI4usv(GLuint index, const GLushort *v);
ANGLE_EXPORT void GL_APIENTRY
VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);

// GL 3.1
ANGLE_EXPORT void GL_APIENTRY CopyBufferSubData(GLenum readTarget,
                                                GLenum writeTarget,
                                                GLintptr readOffset,
                                                GLintptr writeOffset,
                                                GLsizeiptr size);
ANGLE_EXPORT void GL_APIENTRY DrawArraysInstanced(GLenum mode,
                                                  GLint first,
                                                  GLsizei count,
                                                  GLsizei instancecount);
ANGLE_EXPORT void GL_APIENTRY DrawElementsInstanced(GLenum mode,
                                                    GLsizei count,
                                                    GLenum type,
                                                    const void *indices,
                                                    GLsizei instancecount);
ANGLE_EXPORT void GL_APIENTRY GetActiveUniformBlockName(GLuint program,
                                                        GLuint uniformBlockIndex,
                                                        GLsizei bufSize,
                                                        GLsizei *length,
                                                        GLchar *uniformBlockName);
ANGLE_EXPORT void GL_APIENTRY GetActiveUniformBlockiv(GLuint program,
                                                      GLuint uniformBlockIndex,
                                                      GLenum pname,
                                                      GLint *params);
ANGLE_EXPORT void GL_APIENTRY GetActiveUniformName(GLuint program,
                                                   GLuint uniformIndex,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLchar *uniformName);
ANGLE_EXPORT void GL_APIENTRY GetActiveUniformsiv(GLuint program,
                                                  GLsizei uniformCount,
                                                  const GLuint *uniformIndices,
                                                  GLenum pname,
                                                  GLint *params);
ANGLE_EXPORT GLuint GL_APIENTRY GetUniformBlockIndex(GLuint program,
                                                     const GLchar *uniformBlockName);
ANGLE_EXPORT void GL_APIENTRY GetUniformIndices(GLuint program,
                                                GLsizei uniformCount,
                                                const GLchar *const *uniformNames,
                                                GLuint *uniformIndices);
ANGLE_EXPORT void GL_APIENTRY PrimitiveRestartIndex(GLuint index);
ANGLE_EXPORT void GL_APIENTRY TexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY UniformBlockBinding(GLuint program,
                                                  GLuint uniformBlockIndex,
                                                  GLuint uniformBlockBinding);

// GL 3.2
ANGLE_EXPORT GLenum GL_APIENTRY ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
ANGLE_EXPORT void GL_APIENTRY DeleteSync(GLsync sync);
ANGLE_EXPORT void GL_APIENTRY DrawElementsBaseVertex(GLenum mode,
                                                     GLsizei count,
                                                     GLenum type,
                                                     const void *indices,
                                                     GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY DrawElementsInstancedBaseVertex(GLenum mode,
                                                              GLsizei count,
                                                              GLenum type,
                                                              const void *indices,
                                                              GLsizei instancecount,
                                                              GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY DrawRangeElementsBaseVertex(GLenum mode,
                                                          GLuint start,
                                                          GLuint end,
                                                          GLsizei count,
                                                          GLenum type,
                                                          const void *indices,
                                                          GLint basevertex);
ANGLE_EXPORT GLsync GL_APIENTRY FenceSync(GLenum condition, GLbitfield flags);
ANGLE_EXPORT void GL_APIENTRY FramebufferTexture(GLenum target,
                                                 GLenum attachment,
                                                 GLuint texture,
                                                 GLint level);
ANGLE_EXPORT void GL_APIENTRY GetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
ANGLE_EXPORT void GL_APIENTRY GetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY GetInteger64v(GLenum pname, GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
ANGLE_EXPORT void GL_APIENTRY
GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
ANGLE_EXPORT GLboolean GL_APIENTRY IsSync(GLsync sync);
ANGLE_EXPORT void GL_APIENTRY MultiDrawElementsBaseVertex(GLenum mode,
                                                          const GLsizei *count,
                                                          GLenum type,
                                                          const void *const *indices,
                                                          GLsizei drawcount,
                                                          const GLint *basevertex);
ANGLE_EXPORT void GL_APIENTRY ProvokingVertex(GLenum mode);
ANGLE_EXPORT void GL_APIENTRY SampleMaski(GLuint maskNumber, GLbitfield mask);
ANGLE_EXPORT void GL_APIENTRY TexImage2DMultisample(GLenum target,
                                                    GLsizei samples,
                                                    GLenum internalformat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLboolean fixedsamplelocations);
ANGLE_EXPORT void GL_APIENTRY TexImage3DMultisample(GLenum target,
                                                    GLsizei samples,
                                                    GLenum internalformat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLsizei depth,
                                                    GLboolean fixedsamplelocations);
ANGLE_EXPORT void GL_APIENTRY WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);

// GL 3.3
ANGLE_EXPORT void GL_APIENTRY BindFragDataLocationIndexed(GLuint program,
                                                          GLuint colorNumber,
                                                          GLuint index,
                                                          const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY BindSampler(GLuint unit, GLuint sampler);
ANGLE_EXPORT void GL_APIENTRY ColorP3ui(GLenum type, GLuint color);
ANGLE_EXPORT void GL_APIENTRY ColorP3uiv(GLenum type, const GLuint *color);
ANGLE_EXPORT void GL_APIENTRY ColorP4ui(GLenum type, GLuint color);
ANGLE_EXPORT void GL_APIENTRY ColorP4uiv(GLenum type, const GLuint *color);
ANGLE_EXPORT void GL_APIENTRY DeleteSamplers(GLsizei count, const GLuint *samplers);
ANGLE_EXPORT void GL_APIENTRY GenSamplers(GLsizei count, GLuint *samplers);
ANGLE_EXPORT GLint GL_APIENTRY GetFragDataIndex(GLuint program, const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY GetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
ANGLE_EXPORT void GL_APIENTRY GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY IsSampler(GLuint sampler);
ANGLE_EXPORT void GL_APIENTRY MultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY MultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY MultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY MultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY MultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY MultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY MultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY MultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY NormalP3ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY NormalP3uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY QueryCounter(GLuint id, GLenum target);
ANGLE_EXPORT void GL_APIENTRY SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
ANGLE_EXPORT void GL_APIENTRY SamplerParameterIuiv(GLuint sampler,
                                                   GLenum pname,
                                                   const GLuint *param);
ANGLE_EXPORT void GL_APIENTRY SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY SamplerParameterfv(GLuint sampler,
                                                 GLenum pname,
                                                 const GLfloat *param);
ANGLE_EXPORT void GL_APIENTRY SamplerParameteri(GLuint sampler, GLenum pname, GLint param);
ANGLE_EXPORT void GL_APIENTRY SamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
ANGLE_EXPORT void GL_APIENTRY SecondaryColorP3ui(GLenum type, GLuint color);
ANGLE_EXPORT void GL_APIENTRY SecondaryColorP3uiv(GLenum type, const GLuint *color);
ANGLE_EXPORT void GL_APIENTRY TexCoordP1ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY TexCoordP1uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY TexCoordP2ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY TexCoordP2uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY TexCoordP3ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY TexCoordP3uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY TexCoordP4ui(GLenum type, GLuint coords);
ANGLE_EXPORT void GL_APIENTRY TexCoordP4uiv(GLenum type, const GLuint *coords);
ANGLE_EXPORT void GL_APIENTRY VertexAttribDivisor(GLuint index, GLuint divisor);
ANGLE_EXPORT void GL_APIENTRY VertexAttribP1ui(GLuint index,
                                               GLenum type,
                                               GLboolean normalized,
                                               GLuint value);
ANGLE_EXPORT void GL_APIENTRY VertexAttribP1uiv(GLuint index,
                                                GLenum type,
                                                GLboolean normalized,
                                                const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY VertexAttribP2ui(GLuint index,
                                               GLenum type,
                                               GLboolean normalized,
                                               GLuint value);
ANGLE_EXPORT void GL_APIENTRY VertexAttribP2uiv(GLuint index,
                                                GLenum type,
                                                GLboolean normalized,
                                                const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY VertexAttribP3ui(GLuint index,
                                               GLenum type,
                                               GLboolean normalized,
                                               GLuint value);
ANGLE_EXPORT void GL_APIENTRY VertexAttribP3uiv(GLuint index,
                                                GLenum type,
                                                GLboolean normalized,
                                                const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY VertexAttribP4ui(GLuint index,
                                               GLenum type,
                                               GLboolean normalized,
                                               GLuint value);
ANGLE_EXPORT void GL_APIENTRY VertexAttribP4uiv(GLuint index,
                                                GLenum type,
                                                GLboolean normalized,
                                                const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY VertexP2ui(GLenum type, GLuint value);
ANGLE_EXPORT void GL_APIENTRY VertexP2uiv(GLenum type, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY VertexP3ui(GLenum type, GLuint value);
ANGLE_EXPORT void GL_APIENTRY VertexP3uiv(GLenum type, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY VertexP4ui(GLenum type, GLuint value);
ANGLE_EXPORT void GL_APIENTRY VertexP4uiv(GLenum type, const GLuint *value);
}  // namespace gl

#endif  // LIBGL_ENTRY_POINTS_GL_3_AUTOGEN_H_
